// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  username           String?
  email              String?   @unique
  password           String?
  image              String?
  emailVerified      DateTime? @map("email_verified")
  profileComplete    Boolean   @default(false)
  tempOtpSecret     String? // Segreto temporaneo per l'autenticazione a due fattori
  twoFactorSecret    String? // Segreto per la 2FA
  isTwoFactorEnabled Boolean   @default(false) // Indica se la 2FA è attivata
  twoFactorPass      Boolean  @default(false)
  role               Role      @default(USER)
  
  // Relazioni esistenti
  accounts           Account[]
  sessions           Session[]
  
  // Nuove relazioni per insegnanti
  timeSlots          TimeSlot[]      
  teacherBookings    Booking[]       @relation("TeacherBookings")
  packages           LessonPackage[] @relation("TeacherPackages")
  sales              Purchase[]      @relation("TeacherSales")
  
  // Nuove relazioni per studenti
  studentBookings    Booking[]       @relation("StudentBookings")
  purchases          Purchase[]      @relation("StudentPurchases")
  
  // Relazioni per i profili separati
  teacherProfile     TeacherProfile? @relation("TeacherProfile")
  studentProfile     StudentProfile? @relation("StudentProfile")
}

enum Role {
  USER      // studenti
  TEACHER   // insegnanti
  ADMIN
  MODERATOR
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Token {
  id        String    @id @default(cuid())
  email     String
  token     String
  expiresAt DateTime
  createdAt DateTime  @default(now())
  type      TokenType

  @@unique([email, token])
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  RESET_2FA
}

// === PROFILI SEPARATI ===

model TeacherProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation("TeacherProfile", fields: [userId], references: [id], onDelete: Cascade)
  
  // Informazioni professionali
  title            String?  // "Insegnante di Italiano certificato"
  bio              String?  // Descrizione lunga
  experience       String?  // Anni di esperienza, certificazioni
  education        String?  // Formazione
  
  // Lingue insegnate
  nativeLanguages  String[] // ["Italian"]
  teachingLanguages String[] // ["Italian", "English"]
  spokenLanguages   String[] // con livelli: ["English-C2", "Spanish-B1"]
  
  // Prezzi e disponibilità
  hourlyRate       Decimal? @db.Decimal(10,2) // prezzo base per ora
  trialLessonRate  Decimal? @db.Decimal(10,2) // prezzo lezione di prova
  timezone         String?  // "Europe/Rome"
  
  // Statistiche e valutazioni
  totalLessons     Int      @default(0)
  avgRating        Decimal? @db.Decimal(3,2) // 4.85
  totalReviews     Int      @default(0)
  
  // Stato del profilo
  isVerified       Boolean  @default(false)
  isAvailable      Boolean  @default(true)
  profileVideo     String?  // URL video di presentazione
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  reviews          Review[]
  specialties      TeachingSpecialty[]
}

model StudentProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation("StudentProfile", fields: [userId], references: [id], onDelete: Cascade)
  
  // Informazioni di apprendimento
  nativeLanguage    String?  // "English"
  learningLanguages String[] // ["Italian", "Spanish"]
  currentLevel      String?  // "Beginner", "Intermediate", "Advanced"
  learningGoals     String[] // ["Travel", "Business", "Exam"]
  
  // Preferenze
  timezone          String?  // "America/New_York"
  preferredSchedule String?  // "Evenings", "Weekends"
  
  // Statistiche
  totalLessons      Int      @default(0)
  joinedAt          DateTime @default(now())
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  reviews           Review[] @relation("StudentReviews")
}

model TeachingSpecialty {
  id          Int            @id @default(autoincrement())
  teacherId   String
  teacher     TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  category    SpecialtyType
  name        String         // "Business Italian", "Conversation"
  description String?
  
  @@index([teacherId])
}

enum SpecialtyType {
  CONVERSATION
  BUSINESS
  EXAM_PREP
  GRAMMAR
  PRONUNCIATION
  WRITING
  BEGINNERS
  ADVANCED
}

// === SISTEMA DI RECENSIONI ===

model Review {
  id         Int            @id @default(autoincrement())
  studentId  String
  teacherId  String
  bookingId  Int?           @unique // collegata a una lezione specifica
  
  student    StudentProfile @relation("StudentReviews", fields: [studentId], references: [id])
  teacher    TeacherProfile @relation(fields: [teacherId], references: [id])
  booking    Booking?       @relation(fields: [bookingId], references: [id])
  
  rating     Int            // 1-5 stelle
  comment    String?
  
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  
  @@index([teacherId])
  @@index([studentId])
}

// === SISTEMA DI LEZIONI (ESISTENTE) ===

model LessonPackage {
  id          Int     @id @default(autoincrement())
  teacherId   String
  teacher     User    @relation("TeacherPackages", fields: [teacherId], references: [id])
  
  name        String  // "5 Lezioni Standard", "Lezione di Prova"
  description String?
  lessonCount Int     // quante lezioni include (1 per singola, 5 per pacchetto)
  duration    Int     // durata di ogni lezione in minuti (30, 60, etc.)
  price       Decimal @db.Decimal(10,2) // prezzo totale del pacchetto
  isActive    Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  purchases   Purchase[]
}

model Purchase {
  id               Int           @id @default(autoincrement())
  studentId        String
  teacherId        String
  packageId        Int
  
  student          User          @relation("StudentPurchases", fields: [studentId], references: [id])
  teacher          User          @relation("TeacherSales", fields: [teacherId], references: [id])
  package          LessonPackage @relation(fields: [packageId], references: [id])
  
  totalLessons     Int           // lezioni totali acquistate
  usedLessons      Int           @default(0) // lezioni già prenotate/usate
  remainingLessons Int           // lezioni rimanenti da utilizzare
  
  purchaseDate     DateTime      @default(now())
  expiryDate       DateTime?     // scadenza del pacchetto (opzionale)
  
  bookings         Booking[]
  
  @@index([studentId, teacherId])
}

model TimeSlot {
  id        Int      @id @default(autoincrement())
  teacherId String
  teacher   User     @relation(fields: [teacherId], references: [id])
  
  date      DateTime // data dello slot (es. 2025-06-22)
  startTime String   // orario inizio (es. "10:00")
  endTime   String   // orario fine (es. "11:00")
  duration  Int      // durata in minuti di questo slot
  isActive  Boolean  @default(true) // per disabilitare senza cancellare
  
  source      SlotSource @default(MANUAL)
  templateId  String?    // per raggruppare slot dello stesso "batch" di template

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings  Booking[]
  
  @@unique([teacherId, date, startTime, endTime])
  @@index([teacherId, date])
}

enum SlotSource {
  MANUAL      
  TEMPLATE    
}

model Booking {
  id         Int      @id @default(autoincrement())
  studentId  String
  teacherId  String
  timeSlotId Int      @unique
  purchaseId Int      // quale acquisto sta "consumando"
  
  status     BookingStatus @default(CONFIRMED)
  notes      String?       // note dello studente
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  
  timeSlot   TimeSlot @relation(fields: [timeSlotId], references: [id])
  student    User     @relation("StudentBookings", fields: [studentId], references: [id])
  teacher    User     @relation("TeacherBookings", fields: [teacherId], references: [id])
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  review     Review?
  
  @@index([studentId])
  @@index([teacherId])
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}